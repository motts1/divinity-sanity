"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _schema = _interopRequireDefault(require("part:@sanity/base/schema"));

var _default = _interopRequireDefault(require("part:@sanity/components/panes/default"));

var _queryContainer = _interopRequireDefault(require("part:@sanity/base/query-container"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/snackbar/default"));

var _spinner = _interopRequireDefault(require("part:@sanity/components/loading/spinner"));

var _draftUtils = require("part:@sanity/base/util/draft-utils");

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _settings = _interopRequireDefault(require("../settings"));

var _DocumentsListPane = _interopRequireDefault(require("./styles/DocumentsListPane.css"));

var _ListView = _interopRequireDefault(require("./styles/ListView.css"));

var _InfiniteList = _interopRequireDefault(require("./InfiniteList"));

var _PaneItem = _interopRequireDefault(require("./PaneItem"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DEFAULT_ORDERING = [{
  field: '_createdAt',
  direction: 'desc'
}];

function removePublishedWithDrafts(documents) {
  return (0, _draftUtils.collate)(documents).map(entry => {
    var doc = entry.draft || entry.published;
    return _objectSpread({}, doc, {
      hasPublished: !!entry.published,
      hasDraft: !!entry.draft
    });
  });
}

function getDocumentKey(document) {
  return (0, _draftUtils.getPublishedId)(document._id);
}

function getTypeNameFromSingleTypeFilter(filter) {
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var pattern = /\b_type\s*==\s*(['"].*?['"]|\$.*?(?:\s|$))|\B(['"].*?['"]|\$.*?(?:\s|$))\s*==\s*_type\b/;
  var matches = filter.match(pattern);

  if (!matches) {
    return null;
  }

  var match = (matches[1] || matches[2]).trim().replace(/^["']|["']$/g, '');
  var typeName = match[0] === '$' ? params[match.slice(1)] : match;
  return typeName || null;
}

function isSimpleTypeFilter(filter) {
  return /^_type\s*==\s*['"$]\w+['"]?\s*$/.test(filter.trim());
}

function toOrderClause(orderBy) {
  return orderBy.map(ordering => [ordering.field, (ordering.direction || '').toLowerCase()].map(str => str.trim()).filter(Boolean).join(' ')).join(', ');
}

class DocumentsListPane extends _react.default.PureComponent {
  constructor(props) {
    super();

    _defineProperty(this, "actionHandlers", {
      setLayout: (_ref) => {
        var layout = _ref.layout;
        this.layoutSetting.set(layout);
      },
      setSortOrder: sort => {
        this.sortOrderSetting.set(sort);
      }
    });

    _defineProperty(this, "state", {
      scrollTop: 0,
      sortOrder: null,
      layout: null
    });

    _defineProperty(this, "renderItem", item => _react.default.createElement(_PaneItem.default, {
      id: (0, _draftUtils.getPublishedId)(item._id),
      layout: this.state.layout || this.props.defaultLayout || 'default',
      value: item,
      icon: this.props.displayOptions.showIcons === false ? false : undefined,
      schemaType: _schema.default.get(item._type),
      isSelected: this.itemIsSelected(item)
    }));

    _defineProperty(this, "handleAction", item => {
      var handler = typeof item.action === 'function' ? item.action : this.actionHandlers[item.action];

      if (!handler) {
        return false;
      }

      handler(item.params, this);
      return true;
    });

    _defineProperty(this, "handleScroll", scrollTop => {
      this.setState({
        scrollTop
      });
    });

    var _props$options = props.options,
        filter = _props$options.filter,
        params = _props$options.params;
    var typeName = getTypeNameFromSingleTypeFilter(filter, params);

    var settingsNamespace = _settings.default.forNamespace(typeName);

    this.sortOrderSetting = settingsNamespace.forKey('sortOrder');
    this.layoutSetting = settingsNamespace.forKey('layout'); // Passed to rendered <Menu> components. This prevents the "click outside"
    // functionality from kicking in when pressing the toggle menu button

    this.templateMenuId = Math.random().toString(36).substr(2, 6);
    var sync = true;
    this.settingsSubscription = (0, _rxjs.combineLatest)(this.sortOrderSetting.listen(DEFAULT_ORDERING), this.layoutSetting.listen()).pipe((0, _operators.map)((_ref2) => {
      var _ref3 = _slicedToArray(_ref2, 2),
          sortOrder = _ref3[0],
          layout = _ref3[1];

      return {
        sortOrder,
        layout
      };
    }), (0, _operators.tap)(nextState => {
      if (sync) {
        this.state = nextState;
      } else {
        this.setState(nextState);
      }
    })).subscribe();
    sync = false;
  }

  componentWillUnmount() {
    this.settingsSubscription.unsubscribe();
  }

  itemIsSelected(item) {
    return this.props.childItemId === (0, _draftUtils.getPublishedId)(item._id);
  }

  buildListQuery() {
    var options = this.props.options;
    var filter = options.filter,
        defaultOrdering = options.defaultOrdering;
    var sortState = this.state.sortOrder;
    var extendedProjection = sortState && sortState.extendedProjection;
    var projectionFields = ['_id', '_type'];
    var finalProjection = projectionFields.join(', ');
    var sortBy = sortState && sortState.by || defaultOrdering || [];
    var sort = sortBy.length > 0 ? sortBy : DEFAULT_ORDERING;

    if (extendedProjection) {
      var firstProjection = projectionFields.concat(extendedProjection).join(', '); // At first glance, you might think that 'order' should come before 'slice'?
      // However, this is actullay a counter-bug
      // to https://github.com/sanity-io/gradient/issues/922 which causes:
      // 1. case-insensitive ordering (we want this)
      // 2. null-values to sort to the top, even when order is desc (we don't want this)
      // Because Studios in the wild rely on the buggy nature of this
      // do not change this until we have API versioning

      return ["*[".concat(filter, "] [0...50000]"), "{".concat(firstProjection, "}"), "order(".concat(toOrderClause(sort), ")"), "{".concat(finalProjection, "}")].join(' | ');
    }

    return "*[".concat(filter, "] | order(").concat(toOrderClause(sort), ") [0...50000] {").concat(finalProjection, "}");
  }

  render() {
    var _this$props = this.props,
        title = _this$props.title,
        options = _this$props.options,
        className = _this$props.className,
        isCollapsed = _this$props.isCollapsed,
        isSelected = _this$props.isSelected,
        onCollapse = _this$props.onCollapse,
        onExpand = _this$props.onExpand,
        defaultLayout = _this$props.defaultLayout,
        menuItems = _this$props.menuItems,
        menuItemGroups = _this$props.menuItemGroups,
        initialValueTemplates = _this$props.initialValueTemplates;
    var filter = options.filter,
        params = options.params;
    var layout = this.state.layout || defaultLayout || 'default';
    var filterIsSimpleTypeContraint = isSimpleTypeFilter(filter);

    var hasItems = items => items && items.length > 0;

    var query = this.buildListQuery();
    return _react.default.createElement(_default.default, {
      title: title,
      className: className,
      styles: this.props.styles,
      index: this.props.index,
      scrollTop: this.state.scrollTop,
      menuItems: menuItems,
      menuItemGroups: menuItemGroups,
      initialValueTemplates: initialValueTemplates,
      isSelected: isSelected,
      isCollapsed: isCollapsed,
      onCollapse: onCollapse,
      onAction: this.handleAction,
      onExpand: onExpand,
      isScrollable: false
    }, _react.default.createElement(_queryContainer.default, {
      query: query,
      params: params
    }, (_ref4) => {
      var result = _ref4.result,
          loading = _ref4.loading,
          error = _ref4.error,
          onRetry = _ref4.onRetry;

      if (error) {
        return _react.default.createElement(_default2.default, {
          kind: "error",
          isPersisted: true,
          actionTitle: "Retry",
          onAction: onRetry,
          title: "An error occurred while loading items:",
          subtitle: _react.default.createElement("div", null, error.message)
        });
      }

      if (loading) {
        return _react.default.createElement("div", {
          className: _DocumentsListPane.default["layout__".concat(layout)]
        }, loading && _react.default.createElement(_spinner.default, {
          center: true,
          message: "Loading items\u2026"
        }));
      }

      if (!result) {
        return null;
      }

      var items = removePublishedWithDrafts(result ? result.documents : []);

      if (!hasItems(items)) {
        return _react.default.createElement("div", {
          className: _DocumentsListPane.default.empty
        }, _react.default.createElement("div", null, _react.default.createElement("h3", null, filterIsSimpleTypeContraint ? 'No documents of this type found' : 'No documents matching this filter found')));
      }

      return _react.default.createElement("div", {
        className: _DocumentsListPane.default["layout__".concat(layout)]
      }, items && _react.default.createElement(_InfiniteList.default, {
        className: _ListView.default.scroll,
        onScroll: this.handleScroll,
        items: items,
        layout: layout,
        getItemKey: getDocumentKey,
        renderItem: this.renderItem
      }));
    }));
  }

}

exports.default = DocumentsListPane;

_defineProperty(DocumentsListPane, "propTypes", {
  index: _propTypes.default.number.isRequired,
  title: _propTypes.default.string.isRequired,
  childItemId: _propTypes.default.string.isRequired,
  className: _propTypes.default.string,
  styles: _propTypes.default.object,
  // eslint-disable-line react/forbid-prop-types
  defaultLayout: _propTypes.default.string,
  options: _propTypes.default.shape({
    filter: _propTypes.default.string.isRequired,
    defaultOrdering: _propTypes.default.arrayOf(_propTypes.default.shape({
      field: _propTypes.default.string.isRequired,
      direction: _propTypes.default.oneOf(['asc', 'desc'])
    })),
    params: _propTypes.default.object // eslint-disable-line react/forbid-prop-types

  }).isRequired,
  menuItems: _propTypes.default.arrayOf(_propTypes.default.shape({
    title: _propTypes.default.string.isRequired
  })),
  menuItemGroups: _propTypes.default.arrayOf(_propTypes.default.shape({
    id: _propTypes.default.string.isRequired
  })),
  initialValueTemplates: _propTypes.default.arrayOf(_propTypes.default.shape({
    templateId: _propTypes.default.string,
    parameters: _propTypes.default.object // eslint-disable-line react/forbid-prop-types

  })),
  displayOptions: _propTypes.default.shape({
    showIcons: _propTypes.default.bool
  }),
  isSelected: _propTypes.default.bool.isRequired,
  isCollapsed: _propTypes.default.bool.isRequired,
  onExpand: _propTypes.default.func,
  onCollapse: _propTypes.default.func
});

_defineProperty(DocumentsListPane, "defaultProps", {
  className: '',
  styles: {},
  menuItems: [],
  menuItemGroups: [],
  displayOptions: {},
  onExpand: undefined,
  onCollapse: undefined,
  defaultLayout: undefined,
  initialValueTemplates: undefined
});